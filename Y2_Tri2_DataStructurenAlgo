import sys
import re
import operator as op


def standardizer():
    """
    This function does the necessary clean-up for the US Country Code and numbers,omitting the white spaces and
    dash in it
    :return: List of phones numbers after the clean-up
    """

    # Define a regular expression pattern to match numerical digits
    digit_pattern = re.compile(r'\d')

    phone_numbers = str(sys.argv[1]).split(",")  # Split the input string into a list of individual phone numbers
    
    standardized_numbers = []

    # Remove all non-digit characters from the phone number using the regular expression pattern
    for number in phone_numbers:
        digits_only = ''.join(digit_pattern.findall(number))

        if digits_only == '':
            print("Please ensure that every number contains 10-11 digits.")
            sys.exit(1)

        standardized_numbers.append(digits_only) # Append into normalized phone number list

    # Return the normalized phone numbers as a list
    return standardized_numbers


def standardizer_2nd_Part(numbers):
    """
    This function does the necessary clean-up for the US Country Code and numbers,omitting the white spaces and
    dash in it for the extension of the program in Part 2
    :return: List of phones numbers after the clean-up
    """

    # Define a regular expression pattern to match numerical digits
    digit_pattern = re.compile(r'\d')

    # Split the input string into a list of individual phone numbers from the numbers array instead of Argv
    phone_numbers = str(numbers).split(",")

    # Create an empty array to hold the normalized phone numbers
    standardized_numbers = []

    # Loop over each phone number in the input list
    for number in phone_numbers:
        # Remove all non-digit characters from the phone number using the regular expression pattern
        digits_only = ''.join(digit_pattern.findall(number))

        if digits_only == '':
            print("Please ensure that every number contains 10-11 digits.")
            sys.exit(1)

        # Append the normalized phone number to the array
        standardized_numbers.append(digits_only)

    # Return the normalized phone numbers as a list
    return standardized_numbers


def merge_sort(array):
    """
    This function is used to sort to an array using merge sort
    :param array: Input array
    :return: Returns the array
    """

    if len(array) <= 1:
        return array
    mid = len(array) // 2
    left = merge_sort(array[:mid])
    right = merge_sort(array[mid:])
    return merge(left, right)


def merge(left, right):
    """
    This function is used to merge the two sorted arrays
    :param left: Left Array
    :param right:Right Array
    :return: Sorted Array
    """
    result = []
    i, j = 0, 0
    while i < len(left) and j < len(right):
        if left[i][1] <= right[j][1]:
            result.append(left[i])
            i += 1
        else:
            result.append(right[j])
            j += 1

    # merging the left and right sorted to result list
    result += left[i:]
    result += right[j:]
    return result


def difference(n1, n2):
    """
    This function computes the numerical difference between the two numbers by using the abs function
    :param n1: First number
    :param n2: Second Number
    :return: The magnitude difference between n1 and n2
    """
    return abs(int(n1) - int(n2))


def find_nearest(numbers, n, k):
    """
    This function to find K nearest numbers to a given number
    :param numbers: Phone numbers list
    :param n: The number to be searched
    :param k: Unique numbers to be searched
    :return: Return the result found for the unique numbers nearest to k

    Time complexity
    difference operation = O(n)
    sort differnece = O( n(lg n) )
    Assemble list of telephone = O(n)
    """

    # Compute the differences between each number and the given number
    diffs = [(num, difference(num, n)) for num in numbers]

    # Sort the differences using merge sort
    sorted_diffs = merge_sort(diffs)

    # Assemble list of telephone numbers with K conditions
    previous = 0
    result = []
    for num, diff in sorted_diffs:
        if diff == 0:       # direct match
            result.append(num)
        else:
            if previous != num:  # no repeat
                if k == 0:
                    break
                result.append(num)
                previous = num
                k -= 1
            else:              # repeat
                result.append(num)
    return result


def find_median(numbers):
    """
    This function finds the median in the number for the given input list for the first part of the assignment.

    :param numbers: This is in the input list of numbers
    :return: Return the median number found in the list.
    """

    n = len(numbers)
    if n % 2 == 0:  # check even
        print("Median: " + str(numbers[n // 2 - 1]
                               ) + ", " + str(numbers[n // 2]))
        return
    else:
        print("Median:", numbers[n // 2])
        return


def open_file(filename):
    """
    This function opens the file and read the text file context.
    :return: Return the file contents read from the text file
    """
    file = open(filename, "r")  # open read file

    data = file.read()
    dataInList = data.split("\n")  # split by paragraph

    file.close()
    return dataInList  # return list of raw strings


def validator(phonenumbers):
    """
    Validates a list of US phone numbers, rejecting those with invalid area codes or length.

    Args:
        numbers (list): A list of strings representing US phone numbers.

    Returns:
        list: The list of validated phone numbers or list of invalidated phone numbers.
    """

    # Define a regular expression pattern to match US phone numbers
    phone_pattern = re.compile(r'^1?\d{10}$|^1?\d{11}$')

    invalid_numbers = []

    count = 0  # index count

    for number in phonenumbers:  # Loop over each phone number in the input list

        if phone_pattern.match(number):  # Check if the number has a valid format

            if (len(number) == 11 and number[1:4].startswith('0')) or (
                    len(number) == 10 and number[:3].startswith('0')) or (
                        len(number) == 11 and not number.startswith('1')):
                # Check if the area code starts with 0, or if phone number is adequate
                invalid_numbers.append(number)

        else:
            invalid_numbers.append(number)

        if len(number) == 11:  # if 11 digits, make it 10 digits, removing the 1st element in the string
            number = number[1:]
            phonenumbers[count] = number

        count += 1

    if invalid_numbers:  # Error message
        print(f"\nThe following phone numbers are invalid: {invalid_numbers}")
        print("\nPlease ensure your area codes do not begin with 0,"
              "\nyour country codes begin with 1,"
              "\nand that your numbers contain 10-11 digits each.")
        sys.exit(1)


# Main Program Call
if __name__ == '__main__':

    # Assignment part 2
    if len(sys.argv) >= 4:  # For second part extension, checks for the len(sys.argv >=4)

        # read variable from terminal
        search_object = int(sys.argv[2])  # assign argv[2] as search_object
        k = int(sys.argv[3])  # assign argv[3] as k
        # read content in file and assign data as number_array
        numbers_array = open_file(sys.argv[1])

        # Clean and sort the list
        standardized_numbers2 = standardizer_2nd_Part(numbers_array)
        validator(standardized_numbers2)
        sorted_numbers = merge_sort(standardized_numbers2)
        int_list = list(map(int, sorted_numbers))

        # Find the nearest numbers X closest to the search object
        nearest_numbers = find_nearest(int_list, search_object, k)
        x = sorted(nearest_numbers)

        # print all nearest numbers
        for num in x: 
            print(num)

    # For First Part of the Assignment
    else:
        standardized_numbers = standardizer()

        # Validate and Clean data
        validator(standardized_numbers)
        sorted_numbers = merge_sort(standardized_numbers)

        # Find median phone number in the list
        median = find_median(sorted_numbers)

        # Print the sorted phone numbers to the console
        print("Sorted phone numbers {}".format(sorted_numbers))
